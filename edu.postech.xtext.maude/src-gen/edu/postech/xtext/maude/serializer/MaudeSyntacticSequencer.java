/*
 * generated by Xtext 2.17.0
 */
package edu.postech.xtext.maude.serializer;

import com.google.inject.Inject;
import edu.postech.xtext.maude.services.MaudeGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MaudeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MaudeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__a;
	protected AbstractElementAlias match_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__p;
	protected AbstractElementAlias match_Model___SemicolonKeyword_2_3_OptionsKeyword_2_0_ColonKeyword_2_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MaudeGrammarAccess) access;
		match_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getOptionsKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getModelAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getSemicolonKeyword_2_3()));
		match_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getModelAccess().getOptionsKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getModelAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getModelAccess().getSemicolonKeyword_2_3()));
		match_Model___SemicolonKeyword_2_3_OptionsKeyword_2_0_ColonKeyword_2_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getSemicolonKeyword_2_3()), new TokenAlias(false, false, grammarAccess.getModelAccess().getOptionsKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getModelAccess().getColonKeyword_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__a.equals(syntax))
				emit_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__p.equals(syntax))
				emit_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___SemicolonKeyword_2_3_OptionsKeyword_2_0_ColonKeyword_2_1__a.equals(syntax))
				emit_Model___SemicolonKeyword_2_3_OptionsKeyword_2_0_ColonKeyword_2_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('Options' ':' ';')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'Maude Directory' ':' path=STRING
	 *     (rule start) (ambiguity) 'Maude' ':' Maude=STRING
	 *     Maude=STRING ';' (ambiguity) 'Maude Directory' ':' path=STRING
	 *     Maude=STRING ';' (ambiguity) 'Maude' ':' Maude=STRING
	 *     Maude=STRING ';' (ambiguity) (rule end)
	 *     options+=STRING ';' (ambiguity) 'Maude Directory' ':' path=STRING
	 *     options+=STRING ';' (ambiguity) 'Maude' ':' Maude=STRING
	 *     options+=STRING ';' (ambiguity) (rule end)
	 *     path=STRING ';' (ambiguity) 'Maude Directory' ':' path=STRING
	 *     path=STRING ';' (ambiguity) 'Maude' ':' Maude=STRING
	 *     path=STRING ';' (ambiguity) (rule end)
	 */
	protected void emit_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Options' ':' ';')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Model___OptionsKeyword_2_0_ColonKeyword_2_1_SemicolonKeyword_2_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (';' 'Options' ':')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Options' ':' (ambiguity) options+=STRING
	 *     Maude=STRING ';' 'Options' ':' (ambiguity) options+=STRING
	 *     options+=STRING (ambiguity) options+=STRING
	 *     path=STRING ';' 'Options' ':' (ambiguity) options+=STRING
	 */
	protected void emit_Model___SemicolonKeyword_2_3_OptionsKeyword_2_0_ColonKeyword_2_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
