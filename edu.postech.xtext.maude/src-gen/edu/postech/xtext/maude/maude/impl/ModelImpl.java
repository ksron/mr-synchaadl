/**
 * generated by Xtext 2.17.0
 */
package edu.postech.xtext.maude.maude.impl;

import edu.postech.xtext.maude.maude.MaudePackage;
import edu.postech.xtext.maude.maude.Model;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.postech.xtext.maude.maude.impl.ModelImpl#getPath <em>Path</em>}</li>
 *   <li>{@link edu.postech.xtext.maude.maude.impl.ModelImpl#getMaude <em>Maude</em>}</li>
 *   <li>{@link edu.postech.xtext.maude.maude.impl.ModelImpl#getOptions <em>Options</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The default value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected static final String PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected String path = PATH_EDEFAULT;

  /**
   * The default value of the '{@link #getMaude() <em>Maude</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaude()
   * @generated
   * @ordered
   */
  protected static final String MAUDE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMaude() <em>Maude</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaude()
   * @generated
   * @ordered
   */
  protected String maude = MAUDE_EDEFAULT;

  /**
   * The cached value of the '{@link #getOptions() <em>Options</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptions()
   * @generated
   * @ordered
   */
  protected EList<String> options;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MaudePackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPath()
  {
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPath(String newPath)
  {
    String oldPath = path;
    path = newPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaudePackage.MODEL__PATH, oldPath, path));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMaude()
  {
    return maude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaude(String newMaude)
  {
    String oldMaude = maude;
    maude = newMaude;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MaudePackage.MODEL__MAUDE, oldMaude, maude));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getOptions()
  {
    if (options == null)
    {
      options = new EDataTypeEList<String>(String.class, this, MaudePackage.MODEL__OPTIONS);
    }
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MaudePackage.MODEL__PATH:
        return getPath();
      case MaudePackage.MODEL__MAUDE:
        return getMaude();
      case MaudePackage.MODEL__OPTIONS:
        return getOptions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MaudePackage.MODEL__PATH:
        setPath((String)newValue);
        return;
      case MaudePackage.MODEL__MAUDE:
        setMaude((String)newValue);
        return;
      case MaudePackage.MODEL__OPTIONS:
        getOptions().clear();
        getOptions().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MaudePackage.MODEL__PATH:
        setPath(PATH_EDEFAULT);
        return;
      case MaudePackage.MODEL__MAUDE:
        setMaude(MAUDE_EDEFAULT);
        return;
      case MaudePackage.MODEL__OPTIONS:
        getOptions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MaudePackage.MODEL__PATH:
        return PATH_EDEFAULT == null ? path != null : !PATH_EDEFAULT.equals(path);
      case MaudePackage.MODEL__MAUDE:
        return MAUDE_EDEFAULT == null ? maude != null : !MAUDE_EDEFAULT.equals(maude);
      case MaudePackage.MODEL__OPTIONS:
        return options != null && !options.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (path: ");
    result.append(path);
    result.append(", Maude: ");
    result.append(maude);
    result.append(", options: ");
    result.append(options);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
