/*
 * generated by Xtext 2.17.0
 */
package edu.postech.xtext.maude.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MaudeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.xtext.maude.Maude.Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cMaudeDirectoryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPathAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cPathAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cMaudeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMaudeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMaudeSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cMaudeAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cOptionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOptionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOptionsSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cOptionsAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Model:
		//	'Maude Directory' ':' path=STRING ';' & 'Maude' ':' Maude=STRING ';' &
		//	'Options' ':' options+=STRING* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Maude Directory' ':' path=STRING ';' & 'Maude' ':' Maude=STRING ';' & 'Options' ':' options+=STRING* ';'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'Maude Directory' ':' path=STRING ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Maude Directory'
		public Keyword getMaudeDirectoryKeyword_0_0() { return cMaudeDirectoryKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//path=STRING
		public Assignment getPathAssignment_0_2() { return cPathAssignment_0_2; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0_2_0() { return cPathSTRINGTerminalRuleCall_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }
		
		//'Maude' ':' Maude=STRING ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Maude'
		public Keyword getMaudeKeyword_1_0() { return cMaudeKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//Maude=STRING
		public Assignment getMaudeAssignment_1_2() { return cMaudeAssignment_1_2; }
		
		//STRING
		public RuleCall getMaudeSTRINGTerminalRuleCall_1_2_0() { return cMaudeSTRINGTerminalRuleCall_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
		
		//'Options' ':' options+=STRING* ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//'Options'
		public Keyword getOptionsKeyword_2_0() { return cOptionsKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//options+=STRING*
		public Assignment getOptionsAssignment_2_2() { return cOptionsAssignment_2_2; }
		
		//STRING
		public RuleCall getOptionsSTRINGTerminalRuleCall_2_2_0() { return cOptionsSTRINGTerminalRuleCall_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
	}
	
	
	private final ModelElements pModel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MaudeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.postech.xtext.maude.Maude".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'Maude Directory' ':' path=STRING ';' & 'Maude' ':' Maude=STRING ';' &
	//	'Options' ':' options+=STRING* ';';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
