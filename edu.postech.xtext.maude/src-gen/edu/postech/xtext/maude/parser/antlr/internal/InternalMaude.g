/*
 * generated by Xtext 2.17.0
 */
grammar InternalMaude;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.postech.xtext.maude.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.postech.xtext.maude.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.postech.xtext.maude.services.MaudeGrammarAccess;

}

@parser::members {

 	private MaudeGrammarAccess grammarAccess;

    public InternalMaudeParser(TokenStream input, MaudeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MaudeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='Maude Directory'
							{
								newLeafNode(otherlv_1, grammarAccess.getModelAccess().getMaudeDirectoryKeyword_0_0());
							}
							otherlv_2=':'
							{
								newLeafNode(otherlv_2, grammarAccess.getModelAccess().getColonKeyword_0_1());
							}
							(
								(
									lv_path_3_0=RULE_STRING
									{
										newLeafNode(lv_path_3_0, grammarAccess.getModelAccess().getPathSTRINGTerminalRuleCall_0_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getModelRule());
										}
										setWithLastConsumed(
											$current,
											"path",
											lv_path_3_0,
											"org.eclipse.xtext.common.Terminals.STRING");
									}
								)
							)
							otherlv_4=';'
							{
								newLeafNode(otherlv_4, grammarAccess.getModelAccess().getSemicolonKeyword_0_3());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 1);
				}
							({true}?=>(otherlv_5='Maude'
							{
								newLeafNode(otherlv_5, grammarAccess.getModelAccess().getMaudeKeyword_1_0());
							}
							otherlv_6=':'
							{
								newLeafNode(otherlv_6, grammarAccess.getModelAccess().getColonKeyword_1_1());
							}
							(
								(
									lv_Maude_7_0=RULE_STRING
									{
										newLeafNode(lv_Maude_7_0, grammarAccess.getModelAccess().getMaudeSTRINGTerminalRuleCall_1_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getModelRule());
										}
										setWithLastConsumed(
											$current,
											"Maude",
											lv_Maude_7_0,
											"org.eclipse.xtext.common.Terminals.STRING");
									}
								)
							)
							otherlv_8=';'
							{
								newLeafNode(otherlv_8, grammarAccess.getModelAccess().getSemicolonKeyword_1_3());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 2);
				}
							({true}?=>(otherlv_9='Options'
							{
								newLeafNode(otherlv_9, grammarAccess.getModelAccess().getOptionsKeyword_2_0());
							}
							otherlv_10=':'
							{
								newLeafNode(otherlv_10, grammarAccess.getModelAccess().getColonKeyword_2_1());
							}
							(
								(
									lv_options_11_0=RULE_STRING
									{
										newLeafNode(lv_options_11_0, grammarAccess.getModelAccess().getOptionsSTRINGTerminalRuleCall_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getModelRule());
										}
										addWithLastConsumed(
											$current,
											"options",
											lv_options_11_0,
											"org.eclipse.xtext.common.Terminals.STRING");
									}
								)
							)*
							otherlv_12=';'
							{
								newLeafNode(otherlv_12, grammarAccess.getModelAccess().getSemicolonKeyword_2_3());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getModelAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup());
			}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
