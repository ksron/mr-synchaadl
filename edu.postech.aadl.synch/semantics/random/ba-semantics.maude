
--- nothing needed for concrete semantics
mod BEHAVIOR-ACTION-CONF is
  including VAR-GEN .
  including BEHAVIOR-CONF .
  protecting CONC-CHECKSAT .

  var BCF : BehaviorConf .
  var CONST : BoolExp .

  op addConst : BehaviorConf BoolExp ~> BehaviorConf [format (b! o)] .
  ceq addConst(BCF, CONST) = BCF if check-true(CONST) .
endm



--- Unlike the symbolic version, we assume every action is deterministic.
--- Also, bound information is not necessary.
mod BEHAVIOR-ACTION-SEMANTICS is
  including BEHAVIOR-ACTION-SYNTAX .
  including BEHAVIOR-ACTION-CONF .
  including BEHAVIOR-EXPRESSION-SEMANTICS .

  var N : Nat .
  var E : Exp .
  vars B : BoolExp .
  var VAL : VarValuation .  
  var FMAP : FeatureMap . 
  var DATA : DataValuation .
  vars PROPS : PropertyAssociation .  
  var BCF BCF' : BehaviorConf .  
  var CR : ComponentRef .  
  var PI : FeatureId .  
  var VI : VarId .
  var A : Action .  
  vars AS AS' AS'' : ActionGroup .
  var ASQ : ActionSequence .  
  var AST : ActionSet .
  vars AE AE' : AADLExp .  
  var ELSIFS : ElseIfs .
  var D : DataContent . 
  var FC : FeatureMapContent . 

  op execAction : Action BehaviorConf ~> BehaviorConf [format (m! o)] .

--- action blocks/sets/sequences

  eq execAction({A ; ASQ}, BCF) = execAction({ASQ}, execAction(A, BCF)) .

  --- assume deterministic behavior
  eq execAction({A & AST}, BCF) = execAction({AST}, execAction(A, BCF)) .  

  eq execAction({A}, BCF) = execAction(A, BCF) .

  --- empty action
  eq execAction({skip}, BCF) = BCF . 

--- Assignment: local variables, output ports/params, and data (sub)components
--- An assignment can be executed only if the value to be assigned is defined.
--- Note that true will be added for each flag B, while B added to CONST.

  eq execAction(v{VI} := AE, BCF) =  execVarAssign(VI, eval(AE,BCF), BCF) .
  eq execAction(f{PI} := AE, BCF) = execPortAssign(PI, eval(AE,BCF), BCF) .
  eq execAction(c{CR} := AE, BCF) = execDataAssign(CR, eval(AE,BCF), BCF) .

  op execVarAssign : VarId DataContent BehaviorConf ~> BehaviorConf [format (m! o)] .
 ceq execVarAssign(VI, E # B, local(VAL) BCF)
   = local(insert(VI, E # bool(true), VAL)) BCF 
  if check-true(B) .

  --- output data ports (NOTE: not checked whether PI is indeed an output port)
  op execPortAssign : FeatureId DataContent BehaviorConf ~> BehaviorConf [format (m! o)] .
 ceq execPortAssign(PI, E # B, feature(FMAP) BCF)
   = feature(insert(PI, E # bool(true), FMAP)) BCF 
  if check-true(B) .
  
 --- only basic values.
  op execDataAssign : ComponentRef DataContent BehaviorConf ~> BehaviorConf [format (m! o)] .
 ceq execDataAssign(CR, E # B, data(DATA) BCF)
   = data(insert(CR, E # bool(true), DATA)) BCF 
  if check-true(B) .
 
  op target : VarAADLExp ~> AssignmentTarget [format (m! o)] .
  eq target(v[VI]) = v{VI} .
  eq target(f[PI]) = f{PI} .
  eq target(c[CR]) = c{CR} .

--- event/event data port for the environment
  eq execAction(PI !, BCF) = execPortAssign(PI, * # bool(true), BCF) .

  eq execAction(PI !(AE), BCF) = execPortAssign(PI, eval(AE,BCF), BCF) .


--- Branch actions: currently, all possible paths are explicitly enumerated
--- A branch can be executed only if the condition value is defined.

  --- if-then
  ceq execAction(if (AE) AS end if, BCF) = execAction(AS, BCF) 
   if check-true(branchCD(eval(AE, BCF))) .
    
  ceq execAction(if (AE) AS end if, BCF) = BCF 
   if check-true(branchCD(eval(not(AE), BCF))) .
    
  --- if-then-else
  ceq execAction(if (AE) AS else AS' end if, BCF) = execAction(AS, BCF) 
   if check-true(branchCD(eval(AE, BCF))) .

  ceq execAction(if (AE) AS else AS' end if, BCF) = execAction(AS', BCF) 
   if check-true(branchCD(eval(not(AE), BCF))) .

  --- elsif (single)
  ceq execAction(if (AE) AS (elsif (AE') AS') end if, BCF) = execAction(AS, BCF)
   if check-true(branchCD(eval(AE, BCF))) .

  ceq execAction(if (AE) AS (elsif (AE') AS') end if, BCF) = execAction(if (AE') AS' end if, BCF)
   if check-true(branchCD(eval(not(AE), BCF))) .

  --- elsif (many)
  ceq execAction(if (AE) AS ((elsif (AE') AS') ELSIFS) end if, BCF) = execAction(AS, BCF) 
   if check-true(branchCD(eval(AE, BCF))) .

  ceq execAction(if (AE) AS ((elsif (AE') AS') ELSIFS) end if, BCF)
    = execAction(if (AE') AS' ELSIFS end if, BCF) 
   if check-true(branchCD(eval(not(AE), BCF))) .

  --- if-elsif-else
  ceq execAction(if (AE) AS (elsif (AE') AS') else AS'' end if, BCF) = execAction(AS, BCF)
   if check-true(branchCD(eval(AE, BCF))) .

  ceq execAction(if (AE) AS (elsif (AE') AS') else AS'' end if, BCF)
    = execAction(if (AE') AS' else AS'' end if, BCF) 
   if check-true(branchCD(eval(not(AE), BCF))) .

  --- if-elsif(many)-else
  ceq execAction(if (AE) AS ((elsif (AE') AS') ELSIFS) else AS'' end if, BCF) = execAction(AS, BCF) 
   if check-true(branchCD(eval(AE, BCF))) .

  ceq execAction(if (AE) AS ((elsif (AE') AS') ELSIFS) else AS'' end if, BCF)
    = execAction(if (AE') AS' ELSIFS else AS'' end if, BCF)
   if check-true(branchCD(eval(not(AE), BCF))) .

--- loop action. NOTE: The for loop is not supported yet.
  ceq execAction(while (AE) {AS}, BCF) = execAction({AS ; while (AE) {AS}}, BCF) 
   if check-true(branchCD(eval(AE, BCF))) .

  ceq execAction(while (AE) {AS}, BCF) = BCF 
   if check-true(branchCD(eval(not(AE), BCF))) .

  eq execAction(do AS until (AE), BCF)
   = execAction(while (not(AE)) {AS}, execAction({AS}, BCF)) .
endm


--- Unlike the symbolic version, we need not const and vargen
mod BEHAVIOR-TRANSITION-RESULT is
  including BEHAVIOR-EXPRESSION-SEMANTICS .
  including BEHAVIOR-LOCATION-ID .
  including BEHAVIOR-CONF .
  
  sort BATransResult .
  op _|_|_ : Location FeatureMap DataValuation -> BATransResult [ctor] .

  var L : Location .
  var FMAP : FeatureMap .
  var DATA : DataValuation .
  var CONST : BoolExp .
  var BCF : BehaviorConf .

  op transResult : Location BehaviorConf ~> BATransResult .
  eq transResult(L, feature(FMAP) data(DATA) BCF) = L | FMAP | DATA .
endm


view BATransResult from TRIV to BEHAVIOR-TRANSITION-RESULT is
  sort Elt to BATransResult .
endv


--- We also assume that transitions are deterministic. The transition
--- bound information is not necessary.
mod BEHAVIOR-TRANSITION-SEMANTICS is
  including BEHAVIOR-ACTION-SEMANTICS .
  including BEHAVIOR-TRANSITION-RESULT .
  including BEHAVIOR-TRANSITION-AUX .

  var E : Exp .
  var AE : AADLExp . 
  vars SL L L' : Location . 
  var LS : Set{Location} .
  vars B B' CONST : BoolExp .
  vars VAL VAL' : VarValuation .  
  var FMAP : FeatureMap . 
  var DATA : DataValuation .
  var PROPS : PropertyAssociation .  
  vars BCF BCF' : BehaviorConf .
  vars TRS TRS' : Set{Transition} .  
  var GUARD : TransGuard .  
  var ACT : ActionBlock .
  var N : Nat .

  op location : Location -> BehaviorConfItem [ctor format (b! o)] .
  op complete : Set{Location} -> BehaviorConfItem [ctor format (b! o)] .
  op trans : Set{Transition} -> BehaviorConfItem [ctor format (b! o)] .

--- Execute transitions until reaching a complete state,
  op execTrans : BehaviorConf ~> BATransResult [format (m! o)] .

  ceq [trans]:
     execTrans(location(L) trans(TRS) local(VAL) BCF)
   =
     execTStep(VAL, location(L') trans(TRS) execAction(ACT, local(VAL) BCF))
   if (L -[GUARD]-> L' ACT) ; TRS' := TRS
   /\ check-true(guardConst(GUARD, outTrans(L, TRS'), local(VAL) BCF)) .

  op execTStep : VarValuation BehaviorConf ~> BATransResult [format (m! o)] .
   eq execTStep(VAL, location(L) complete(LS) local(VAL') BCF) 
    = if L in LS
      then transResult(L, BCF) 
      else execTrans(location(L) complete(LS) local(VAL) BCF) fi .
endm

