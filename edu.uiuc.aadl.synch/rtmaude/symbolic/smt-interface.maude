
--- real-index and bool-index denotes variable indices for newly generated 
--- rational and Boolean variables, respectively. uniqueId denotes a 
--- unique identifier for each component to distinguish different
--- variables with the same index. This uniqueId should be generated
--- by code generator of OSATE.
fmod SMT-VAR-GEN is
  including VAR-GEN .
  including SMT-REAL-EXP .
  including SMT-UNIT-EXP .

  sort SMTVarGen .
  subsort SMTVarGen < VarGen .
  op <_,_,_> : String Nat Nat -> SMTVarGen [ctor] . --- id, real-index, bool-index

  vars I J I' J' : Nat .
  var S : String .
  var B : SMTBoolExp .
  var R : SMTRealExp .
  var VB : SMTBoolVar .
  var VR : SMTRealVar .

  --- create a concrete vargen
  eq init(< S >) = < S, 0, 0 > .

  --- generate a variable of the same type with the given exp
  op gen : SMTVarGen DataType ~> Pair{Exp,VarGen} [format (m! o)] .
  eq gen(< S, I, J >, Boolean) = {b(S,J), < S, I, s J >} .
  eq gen(< S, I, J >, Real)    = {r(S,I), < S, s I, J >} .
  eq gen(< S, I, J >, Unit)    = {     *, < S,   I, J >} .

  --- return true if a given variable is fresh with respect to VarGen
  op fresh? : SMTVar SMTVarGen ~> Bool [format (m! o)] .
  eq fresh?(VB, < S, I, J >) = getIndex(VB) >= J .
  eq fresh?(VR, < S, I, J >) = getIndex(VR) >= I .

  --- return a vargen with a greater index
  op max : SMTVarGen SMTVarGen ~> SMTVarGen [format (m! o)] .
  eq max(< S, I, J >, < S, I', J' >) = < S, max(I,I'), max(J,J') > .
endfm


fmod SMT-TRANS is
  protecting META-LEVEL .
  protecting CONVERSION .

  var N     : Nat .
  vars I I' : Int .
  var C     : Constant .
  vars T T' : Term .
  vars S S' : String .
  var F     : Qid .
  var TL    : TermList .
  var NL    : NeTermList .

--- translate constraints to SMT formulas for Maude-SMT
  op tr : Term -> Term .
  eq tr('`[_`][T]) = trAtom(T) .              --- Boolean/rational constants
  eq tr('b[T])     = trVar(T, "Boolean") .    --- Boolean variables
  eq tr('b[C,T])   = trVar(T, C, "Boolean") . --- Boolean variables (localized)
  eq tr('r[T])     = trVar(T, "Real") .       --- real variables
  eq tr('r[C,T])   = trVar(T, C, "Real") .    --- real variables (localized)

  eq tr('_and_[NL]) = trGather('_and_, NL) .
  eq tr( '_or_[NL]) = trGather( '_or_, NL) .
  eq tr('_xor_[NL]) = trGather('_xor_, NL) .
  eq tr(  '_+_[NL]) = trGather(  '_+_, NL) .
  eq tr(  '_*_[NL]) = trGather(  '_*_, NL) .

  eq tr(F[TL]) = F[trList(TL)] [owise] .

--- translate a term list
  op trList : TermList -> TermList .
  eq trList((T,TL)) = tr(T), trList(TL) .
  eq trList(empty)  = empty .

--- deal with AC operators
  op trGather : Qid NeTermList -> Term .
  eq trGather(F, (T,NL)) = F[tr(T),trGather(F,NL)] .
  eq trGather(F, T)      = tr(T) .

--- create a variable term
  sort Nat? .
  subsort Nat < Nat? .
  op error : -> Nat? [ctor] .  --- error term for translation

  op trVar : GroundTerm String -> Variable [memo] .
  eq trVar(T, S) = qid("V##" + string(downTerm(T,error),10) + ":" + S) .

  op trVar : GroundTerm Constant String -> Variable [memo] .
  eq trVar(T, C, S) 
   = qid("V#" + string(getName(C)) + "#" + string(downTerm(T,error),10) + ":" + S) .

--- create a Boolean/rational term
  op trAtom : Term -> TermQid [memo] .

  eq trAtom('true.Bool)  =  'true.Boolean .
  eq trAtom('false.Bool) = 'false.Boolean .

  eq trAtom('_/_[T,T']) 
   = qid(string(downTerm(T,error),10) + "/" + string(downTerm(T',error),10) + ".Real") .

  eq trAtom(T) = qid(string(downTerm(T,error),10) + "/1.Real") [owise] .
endfm


--- SMT interface for checking (un)satisfiability of Boolean expressions
fmod SMT-CHECKSAT is
  protecting SMT-REAL-EXP .
  protecting SMT-TRANS .
  including CHECKSAT .

  var B  : BoolExp .

  --- checks if the given Boolean expression is satisfiable
  eq check-sat(B)
   = if B == [false] then
       false
     else if B == [true] then
       true
     else
       metaCheck(['REAL-INTEGER], tr(upTerm(B)))
     fi fi .
endfm

